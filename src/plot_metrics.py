import pandas as pd

# Embedding layer with 50 dimensions, LSTM layer
_50d_lstm = pd.DataFrame({
    'Epoch': range(1, 21),
    'Train_Accuracy': [0.5042, 0.5187, 0.5350, 0.5387, 0.5479, 0.5380, 0.5439, 0.6459, 0.7355,  0.7518,  0.6678,  0.5499,  0.5645,  0.6851,  0.8905,  0.9322,  0.9563,  0.9678,  0.9801,  0.9850],
    'Val_Accuracy': [0.5084, 0.5153, 0.5188, 0.5222, 0.5112, 0.5125, 0.5179, 0.7008, 0.7204, 0.7202, 0.5216, 0.5248, 0.5073, 0.8410, 0.8655, 0.8732, 0.8708, 0.8712, 0.8702, 0.8670],
    'Train_Precision': [0.5052, 0.5250, 0.5377, 0.5427, 0.5606, 0.5490, 0.5514, 0.6387, 0.7083, 0.7247, 0.6607, 0.5688, 0.5687, 0.6543, 0.8883, 0.9320, 0.9548, 0.9660, 0.9786, 0.9839],
    'Val_Precision': [0.5584, 0.6862, 0.7138, 0.7136, 0.5058, 0.5065, 0.7082, 0.6562, 0.7113, 0.7002, 0.6992, 0.7281, 0.5038, 0.8344, 0.8389, 0.8994, 0.9043, 0.8642, 0.8791, 0.8790],
    'Train_Recall': [0.4088, 0.3916, 0.5001, 0.4920, 0.4429, 0.4262, 0.4713, 0.6721, 0.8006, 0.8120, 0.6899, 0.4124, 0.5338, 0.7850, 0.8934, 0.9324, 0.9579, 0.9697, 0.9817, 0.9861],
    'Val_Recall': [0.0799, 0.0563, 0.0626, 0.0742, 0.9794, 0.9754, 0.0610, 0.8437, 0.7422, 0.7701, 0.0757, 0.0793, 0.9646, 0.8510, 0.9046, 0.8404, 0.8294, 0.8809, 0.8583, 0.8513],
    'Train_Loss': [0.6947, 0.6825, 0.6640, 0.6470, 0.6441, 0.6373, 0.6519, 0.5946, 0.5510, 0.5329, 0.5821, 0.6368, 0.6538, 0.5500, 0.2812, 0.1900, 0.1385, 0.1060, 0.0771, 0.0643],
    'Val_Loss': [0.6911, 0.6887, 0.6872, 0.6936, 0.7056, 0.7102, 0.6985, 0.6363, 0.6092, 0.6112, 0.7000, 0.7048, 0.6909, 0.3882, 0.3206, 0.3287, 0.3623, 0.3841, 0.4366, 0.4758]
})

# Embedding layer with 100 dimensions, LSTM layer
_100d_lstm = pd.DataFrame({
    'Epoch': range(1, 21),
    'Train_Accuracy': [0.5071, 0.5239, 0.5445, 0.5457, 0.5436, 0.5447, 0.5435, 0.5462, 0.5475, 0.5432, 0.5561, 0.6457, 0.7247, 0.7384, 0.6296, 0.5457, 0.5595, 0.5515, 0.5460, 0.5582],
    'Val_Accuracy': [0.5102, 0.5161, 0.5156, 0.5076, 0.5200, 0.5165, 0.5186, 0.5134, 0.5164, 0.5168, 0.5156, 0.5224, 0.7292, 0.7286, 0.5208, 0.5262, 0.5350, 0.5113, 0.5509, 0.5190],
    'Train_Precision': [0.5093, 0.5282, 0.5476, 0.5508, 0.5477, 0.5414, 0.5669, 0.5585, 0.5590, 0.5657, 0.5762, 0.6715, 0.6823, 0.7658, 0.6358, 0.6232, 0.6362, 0.5604, 0.5437, 0.5582],
    'Val_Precision': [0.5808, 0.7648, 0.7478, 0.5040, 0.6960, 0.6803, 0.7109, 0.5069, 0.7649, 0.6848, 0.5081, 0.5115, 0.7305, 0.6907, 0.6519, 0.7035, 0.7216, 0.6174, 0.5275, 0.7148],
    'Train_Recall': [0.3869, 0.4468, 0.5114, 0.4956, 0.5006, 0.5847, 0.3687, 0.4409, 0.4501, 0.3714, 0.4242, 0.5704, 0.8408, 0.6867, 0.6069, 0.2313, 0.2778, 0.4778, 0.5728, 0.5589],
    'Val_Recall': [0.0733, 0.0466, 0.0472, 0.9642, 0.0709, 0.0623, 0.0626, 0.9786, 0.0474, 0.0624, 0.9781, 0.9942, 0.7266, 0.8279, 0.0893, 0.0907, 0.1138, 0.0595, 0.9766, 0.0634],
    'Train_Loss': [0.6927, 0.6777, 0.6543, 0.6647, 0.6445, 0.6386, 0.6376, 0.6343, 0.6355, 0.6333, 0.6298, 0.6040, 0.5532, 0.5407, 0.6074, 0.6366, 0.6316, 0.6519, 0.6501, 0.6414],
    'Val_Loss': [0.6914, 0.6855, 0.6903, 0.6927, 0.6956, 0.6978, 0.7083, 0.7161, 0.7158, 0.7201, 0.7233, 0.7155, 0.6108, 0.6020, 0.6901, 0.6975, 0.6963, 0.6962, 0.6814, 0.7040]
})

# Embedding layer with 200 dimensions, LSTM layer
_200d_lstm = pd.DataFrame({
    'Epoch': range(1, 21),
    'Train_Accuracy': [0.5099, 0.5296, 0.5364, 0.5439, 0.5476, 0.5476, 0.5445, 0.5554, 0.6767, 0.5478, 0.5564, 0.8663, 0.9320, 0.9583, 0.9763, 0.9850, 0.9895, 0.9902, 0.9924, 0.9953],
    'Val_Accuracy': [0.5076, 0.5116, 0.5193, 0.5115, 0.5073, 0.5203, 0.5230, 0.5249, 0.5176, 0.5182, 0.5976, 0.8740, 0.8804, 0.8755, 0.8683, 0.8672, 0.8638, 0.8593, 0.8646, 0.8606],
    'Train_Precision': [0.5119, 0.5355, 0.5462, 0.5516, 0.5589, 0.5590, 0.5506, 0.5530, 0.6643, 0.5937, 0.5926, 0.8585, 0.9297, 0.9569, 0.9753, 0.9850, 0.9895, 0.9898, 0.9922, 0.9952],
    'Val_Precision': [0.5039, 0.5060, 0.6845, 0.5060, 0.5039, 0.7280, 0.7600, 0.6388, 0.6507, 0.6804, 0.7714, 0.8696, 0.8779, 0.8761, 0.8633, 0.8831, 0.8789, 0.8346, 0.8685, 0.8614],
    'Train_Recall': [0.4262, 0.4462, 0.4300, 0.4694, 0.4511, 0.4514, 0.4844, 0.5786, 0.7145, 0.3026, 0.3606, 0.8773, 0.9347, 0.9598, 0.9774, 0.9850, 0.9895, 0.9906, 0.9926, 0.9954],
    'Val_Recall': [0.9850, 0.9758, 0.0715, 0.9714, 0.9454, 0.0649, 0.0671, 0.1145, 0.0758, 0.0686, 0.2775, 0.8799, 0.8836, 0.8747, 0.8753, 0.8464, 0.8438, 0.8961, 0.8592, 0.8594],
    'Train_Loss': [0.6914, 0.6739, 0.6495, 0.6394, 0.6352, 0.6338, 0.6309, 0.6312, 0.5645, 0.6356, 0.6321, 0.3413, 0.1947, 0.1315, 0.0877, 0.0606, 0.0463, 0.0411, 0.0339, 0.0257],
    'Val_Loss': [0.6902, 0.6881, 0.6992, 0.7155, 0.7244, 0.7287, 0.7316, 0.7883, 0.7177, 0.7233, 0.6930, 0.3279, 0.3149, 0.3455, 0.4350, 0.4340, 0.4871, 0.5114, 0.5700, 0.6072],
})

# Embedding layer with 50 dimensions, two LSTM layers
_50d_lstm_lstm = pd.DataFrame({
    'Epoch': range(1, 21),
    'Train_Accuracy': [0.5000, 0.5180, 0.5365, 0.6071, 0.7624, 0.7657, 0.7556, 0.8328, 0.8800, 0.9101, 0.9260, 0.9347, 0.9486, 0.9568, 0.9660, 0.9721, 0.9790, 0.9764, 0.9830, 0.9864],
    'Val_Accuracy': [0.5000, 0.5234, 0.5231, 0.7408, 0.7342, 0.7296, 0.7500, 0.8386, 0.8546, 0.8548, 0.8653, 0.8729, 0.8751, 0.8768, 0.8702, 0.8700, 0.8726, 0.8742, 0.8725, 0.8716],
    'Train_Precision': [0.5000, 0.5298, 0.5426, 0.6468, 0.7576, 0.7552, 0.7518, 0.8311, 0.8738, 0.9101, 0.9221, 0.9366, 0.9489, 0.9578, 0.9681, 0.9752, 0.9814, 0.9780, 0.9845, 0.9876],
    'Val_Precision': [0.5000, 0.7086, 0.7276, 0.7251, 0.6926, 0.6833, 0.6910, 0.8606, 0.8310, 0.9084, 0.8448, 0.8983, 0.8655, 0.8654, 0.8610, 0.8847, 0.8568, 0.8668, 0.8784, 0.8739],
    'Train_Recall': [0.3462, 0.3189, 0.4642, 0.4718, 0.7719, 0.7862, 0.7632, 0.8353, 0.8883, 0.9100, 0.9305, 0.9326, 0.9484, 0.9556, 0.9637, 0.9688, 0.9765, 0.9746, 0.9814, 0.9850],
    'Val_Recall': [1.0000, 0.0794, 0.0739, 0.7758, 0.8423, 0.8558, 0.9045, 0.8080, 0.8902, 0.7892, 0.8950, 0.8410, 0.8882, 0.8926, 0.8829, 0.8508, 0.8948, 0.8843, 0.8648, 0.8686],
    'Train_Loss': [0.6940, 0.6837, 0.6583, 0.6154, 0.5283, 0.5194, 0.5118, 0.4139, 0.3165, 0.2534, 0.2165, 0.1941, 0.1639, 0.1407, 0.1185, 0.1004, 0.0849, 0.0897, 0.0711, 0.0619],
    'Val_Loss': [0.6927, 0.6835, 0.6837, 0.5810, 0.5999, 0.5801, 0.5662, 0.4074, 0.3856, 0.3726, 0.3714, 0.3338, 0.3438, 0.3414, 0.3670, 0.4154, 0.4367, 0.4563, 0.4654, 0.4934]
})

# Embedding layer with 200 dimensions, two LSTM layers
_200d_lstm_lstm = pd.DataFrame({
    'Epoch': range(1, 21),
    'Train_Accuracy': [0.5125, 0.5324, 0.7358, 0.5748, 0.5625, 0.5422, 0.6205, 0.6765, 0.7011, 0.8824, 0.9212, 0.9455, 0.9628, 0.9689, 0.9714, 0.9798, 0.9828, 0.9825, 0.9829, 0.9848],
    'Val_Accuracy': [0.5134, 0.5183, 0.7216, 0.5218, 0.5172, 0.5150, 0.5115, 0.7604, 0.8166, 0.8687, 0.8741, 0.8752, 0.8724, 0.8726, 0.8705, 0.8714, 0.8703, 0.8700, 0.8697, 0.8705],
    'Train_Precision': [0.5138, 0.5404, 0.7715, 0.5738, 0.5658, 0.5452, 0.6253, 0.6684, 0.7296, 0.8819, 0.9185, 0.9397, 0.9579, 0.9635, 0.9675, 0.9748, 0.9785, 0.9780, 0.9785, 0.9814],
    'Val_Precision': [0.5959, 0.5098, 0.6746, 0.7420, 0.6715, 0.5079, 0.5061, 0.8424, 0.8950, 0.8705, 0.8648, 0.8550, 0.8628, 0.8796, 0.8638, 0.8701, 0.8622, 0.8732, 0.8727, 0.8582],
    'Train_Recall': [0.4650, 0.4326, 0.6702, 0.5814, 0.5378, 0.5096, 0.6013, 0.7003, 0.6390, 0.8830, 0.9244, 0.9522, 0.9682, 0.9747, 0.9754, 0.9852, 0.9874, 0.9873, 0.9875, 0.9884],
    'Val_Recall': [0.0835, 0.9524, 0.8564, 0.0667, 0.0672, 0.9665, 0.9595, 0.6406, 0.7174, 0.8662, 0.8868, 0.9037, 0.8857, 0.8635, 0.8798, 0.8732, 0.8814, 0.8657, 0.8658, 0.8877],
    'Train_Loss': [0.6951, 0.6723, 0.5615, 0.6306, 0.6384, 0.6374, 0.6151, 0.5635, 0.5606, 0.3173, 0.2221, 0.1737, 0.1356, 0.1192, 0.1115, 0.0886, 0.0802, 0.0797, 0.0783, 0.0719],
    'Val_Loss': [0.6887, 0.6856, 0.6171, 0.7126, 0.6983, 0.7131, 0.6932, 0.5458, 0.4516, 0.3313, 0.3145, 0.3459, 0.3735, 0.4293, 0.4078, 0.4408, 0.4640, 0.4651, 0.4735, 0.4856]
})

# Embedding layer with 50 dimensions, LSTM layer with dropout of .3, LSTM layer
_50d_lstm_do3_lstm = pd.DataFrame({
    'Epoch': range(1, 21),
    'Train_Accuracy': [0.5044, 0.5291, 0.5328, 0.5411, 0.5954, 0.8104, 0.9024, 0.9389, 0.9561, 0.9699, 0.9800, 0.9844, 0.9855, 0.9901, 0.9914, 0.9912, 0.9910, 0.9932, 0.9934, 0.9926],
    'Val_Accuracy': [0.5141, 0.5163, 0.5129, 0.5247, 0.7546, 0.8565, 0.8818, 0.8839, 0.8832, 0.8729, 0.8675, 0.8673, 0.8710, 0.8737, 0.8710, 0.8731, 0.8649, 0.8731, 0.8710, 0.8680],
    'Train_Precision': [0.5043, 0.5580, 0.5380, 0.5483, 0.6357, 0.8173, 0.9045, 0.9401, 0.9551, 0.9695, 0.9804, 0.9848, 0.9862, 0.9903, 0.9917, 0.9916, 0.9906, 0.9930, 0.9932, 0.9919],
    'Val_Precision': [0.6205, 0.8110, 0.5068, 0.7882, 0.7621, 0.8401, 0.8843, 0.8921, 0.8774, 0.8345, 0.9084, 0.8866, 0.8490, 0.8775, 0.8788, 0.8707, 0.9033, 0.8521, 0.8703, 0.8870],
    'Train_Recall': [0.5142, 0.2801, 0.4644, 0.4666, 0.4470, 0.7994, 0.8998, 0.9374, 0.9573, 0.9703, 0.9796, 0.9839, 0.9847, 0.9898, 0.9910, 0.9908, 0.9914, 0.9935, 0.9936, 0.9934],
    'Val_Recall': [0.0725, 0.0426, 0.9658, 0.0676, 0.7403, 0.8807, 0.8784, 0.8734, 0.8908, 0.9304, 0.8175, 0.8422, 0.9024, 0.8686, 0.8606, 0.8762, 0.8172, 0.9029, 0.8721, 0.8435],
    'Train_Loss': [0.6924, 0.6819, 0.6598, 0.6447, 0.6278, 0.4468, 0.2588, 0.1807, 0.1366, 0.0997, 0.0743, 0.0610, 0.0561, 0.0439, 0.0385, 0.0389, 0.0380, 0.0323, 0.0323, 0.0328],
    'Val_Loss': [0.6902, 0.6868, 0.6857, 0.6856, 0.5936, 0.3460, 0.2877, 0.3044, 0.3257, 0.3894, 0.4135, 0.4630, 0.4670, 0.5065, 0.5184, 0.5403, 0.5552, 0.5470, 0.5243, 0.5928]
})

# Embedding layer with 50 dimensions, two LSTM layers with dropout of .3
_50d_lstm_do3_lstm_do3 = pd.DataFrame({
    'Epoch': range(1, 8),
    'Train_Accuracy': [0.5045, 0.5158, 0.5373, 0.5770, 0.6421, 0.5770, 0.5588],
    'Val_Accuracy': [0.5005, 0.5184, 0.5150, 0.7203, 0.6676, 0.5190, 0.5206],
    'Train_Precision': [0.5045, 0.5197, 0.5424, 0.5775, 0.6394, 0.5701, 0.5713],
    'Val_Precision': [0.5002, 0.7046, 0.5077, 0.7600, 0.6167, 0.5100, 0.5111],
    'Train_Recall': [0.5098, 0.4156, 0.4770, 0.5735, 0.6516, 0.6261, 0.4710],
    'Val_Recall': [0.9998, 0.0634, 0.9881, 0.6439, 0.8854, 0.9714, 0.9526],
    'Train_Loss': [0.6931, 0.6846, 0.6648, 0.6427, 0.6065, 0.6248, 0.6320],
    'Val_Loss': [0.6926, 0.6855, 0.6880, 0.5993, 0.6441, 0.7114, 0.7294]
})

# Embedding layer with 50 dimensions, two LSTM layers with dropout of .3
_50d_lstm_do3_lstm_do3_attempt2 = pd.DataFrame({
    'Epoch': range(1, 17),
    'Train_Accuracy': [0.5052, 0.5200, 0.5362, 0.5425, 0.5418, 0.6833, 0.7659, 0.8219, 0.8661, 0.8723, 0.8870, 0.8987, 0.8922, 0.9174, 0.9268, 0.9346],
    'Val_Accuracy': [0.5059, 0.5149, 0.5267, 0.5193, 0.5235, 0.7668, 0.7933, 0.8176, 0.8421, 0.8306, 0.8410, 0.8471, 0.8553, 0.8640, 0.8604, 0.8625],
    'Train_Precision': [0.5065, 0.5299, 0.5451, 0.5427, 0.5407, 0.6552, 0.7566, 0.8171, 0.8547, 0.8565, 0.8669, 0.8764, 0.8698, 0.8950, 0.9074, 0.9193],
    'Val_Precision': [0.5030, 0.5077, 0.7260, 0.7779, 0.7335, 0.8581, 0.7933, 0.8669, 0.8489, 0.7974, 0.7990, 0.8091, 0.8203, 0.8526, 0.8603, 0.8399],
    'Train_Recall': [0.4010, 0.3546, 0.4372, 0.5404, 0.5542, 0.7738, 0.7842, 0.8295, 0.8822, 0.8945, 0.9143, 0.9282, 0.9226, 0.9458, 0.9506, 0.9528],
    'Val_Recall': [0.9907, 0.9858, 0.0858, 0.0541, 0.0738, 0.6392, 0.7934, 0.7506, 0.8322, 0.8866, 0.9110, 0.9086, 0.9098, 0.8802, 0.8606, 0.8958],
    'Train_Loss': [0.6930, 0.6843, 0.6630, 0.6414, 0.6406, 0.5678, 0.5113, 0.4353, 0.3390, 0.3334, 0.2987, 0.2808, 0.2940, 0.2418, 0.2296, 0.2098],
    'Val_Loss': [0.6916, 0.6860, 0.6835, 0.6903, 0.7059, 0.5641, 0.5017, 0.4289, 0.3936, 0.4206, 0.3870, 0.3989, 0.3713, 0.3752, 0.4083, 0.3820]
})

# Below are the results of utilizing scikit-learn's KFold to apply cross-validation with the dataset
# The training and validation set were combined into one large dataset, and then split into 5 folds
# Each model was trained on 4 of these folds, with each fold serving as the validation set exactly once

# Embedding layer with 50 dimensions, LSTM layer with dropout of .3, LSTM layer
_50d_lstm_do3_lstm_fold1 = pd.DataFrame({
    'Epoch': range(1, 14),
    'Train_Accuracy': [0.5278, 0.5648, 0.6277, 0.6016, 0.6341, 0.8291, 0.8967, 0.9254, 0.9450, 0.9562, 0.9663, 0.9723, 0.9781],
    'Val_Accuracy': [0.6521, 0.5184, 0.5064, 0.5673, 0.7748, 0.8633, 0.8893, 0.9000, 0.9036, 0.8984, 0.9000, 0.8966, 0.8971],
    'Train_Precision': [0.5252, 0.5713, 0.6341, 0.6075, 0.6507, 0.8424, 0.8978, 0.9256, 0.9436, 0.9550, 0.9653, 0.9712, 0.9775],
    'Val_Precision': [0.6047, 0.5124, 0.7583, 0.9023, 0.7898, 0.8495, 0.9171, 0.9138, 0.9024, 0.8808, 0.8884, 0.9026, 0.9029],
    'Train_Recall': [0.5507, 0.5086, 0.5989, 0.5672, 0.5740, 0.8082, 0.8947, 0.9245, 0.9462, 0.9573, 0.9672, 0.9733, 0.9786],
    'Val_Recall': [0.9020, 0.9927, 0.0360, 0.1625, 0.7561, 0.8870, 0.8589, 0.8860, 0.9077, 0.9243, 0.9176, 0.8919, 0.8927],
    'Train_Loss': [0.6852, 0.6703, 0.6333, 0.6361, 0.6126, 0.4231, 0.2644, 0.1999, 0.1587, 0.1337, 0.1100, 0.0936, 0.0798],
    'Val_Loss': [0.6305, 0.6852, 0.6889, 0.6556, 0.5295, 0.3307, 0.2676, 0.2493, 0.2543, 0.2767, 0.3031, 0.3163, 0.3375]
})

# Embedding layer with 50 dimensions, LSTM layer with dropout of .3, LSTM layer
_50d_lstm_do3_lstm_fold2 = pd.DataFrame({
    'Epoch': range(1, 19),
    'Train_Accuracy': [0.5063, 0.5095, 0.5156, 0.5281, 0.5873, 0.7138, 0.6669, 0.6622, 0.7161, 0.8012, 0.8794, 0.9056, 0.9211, 0.9338, 0.9464, 0.9552, 0.9545, 0.9675],
    'Val_Accuracy': [0.5076, 0.4984, 0.5105, 0.5023, 0.7844, 0.5060, 0.7994, 0.6191, 0.8300, 0.8576, 0.8752, 0.8975, 0.8988, 0.8999, 0.8992, 0.8967, 0.8973, 0.8980],
    'Train_Precision': [0.5088, 0.5094, 0.5144, 0.5279, 0.5919, 0.7218, 0.6431, 0.7060, 0.6913, 0.8136, 0.8768, 0.9008, 0.9193, 0.9314, 0.9458, 0.9550, 0.9506, 0.9650],
    'Val_Precision': [0.5014, 0.4967, 0.5029, 0.4987, 0.8448, 0.5006, 0.8053, 0.9249, 0.8102, 0.8542, 0.8335, 0.8858, 0.8881, 0.8980, 0.9052, 0.9034, 0.8855, 0.8893],
    'Train_Recall': [0.4312, 0.5768, 0.5993, 0.5541, 0.5686, 0.6981, 0.7535, 0.5586, 0.7833, 0.7827, 0.8834, 0.9121, 0.9236, 0.9370, 0.9473, 0.9556, 0.9591, 0.9703],
    'Val_Recall': [0.9762, 0.9992, 0.9810, 0.9956, 0.6916, 0.9984, 0.7845, 0.2511, 0.8576, 0.8590, 0.9346, 0.9103, 0.9103, 0.9000, 0.8895, 0.8861, 0.9103, 0.9069],
    'Train_Loss': [0.6932, 0.6956, 0.6889, 0.6850, 0.6485, 0.5681, 0.5980, 0.5952, 0.5564, 0.4317, 0.3059, 0.2446, 0.2103, 0.1857, 0.1565, 0.1359, 0.1475, 0.1075],
    'Val_Loss': [0.6866, 0.6939, 0.6835, 0.6890, 0.5227, 0.7091, 0.5028, 0.6306, 0.4363, 0.3574, 0.2997, 0.2637, 0.2528, 0.2678, 0.2790, 0.2867, 0.3043, 0.3253]
})

# Embedding layer with 50 dimensions, LSTM layer with dropout of .3, LSTM layer
_50d_lstm_do3_lstm_fold3 = pd.DataFrame({
    'Epoch': range(1, 13),
    'Train_Accuracy': [0.5094, 0.5247, 0.5121, 0.5251, 0.6325, 0.8648, 0.9150, 0.9374, 0.9541, 0.9692, 0.9771, 0.9852],
    'Val_Accuracy': [0.5149, 0.5003, 0.5092, 0.5214, 0.8051, 0.8899, 0.9017, 0.8998, 0.8989, 0.8986, 0.8996, 0.9017],
    'Train_Precision': [0.5112, 0.5290, 0.5135, 0.5424, 0.6915, 0.8721, 0.9156, 0.9377, 0.9537, 0.9691, 0.9758, 0.9843],
    'Val_Precision': [0.6138, 0.5003, 0.6280, 0.6719, 0.7914, 0.9046, 0.9097, 0.8697, 0.9249, 0.8925, 0.8998, 0.9202],
    'Train_Recall': [0.4218, 0.4491, 0.4589, 0.3198, 0.4784, 0.8548, 0.9141, 0.9370, 0.9546, 0.9693, 0.9784, 0.9861],
    'Val_Recall': [0.0820, 1.0000, 0.0466, 0.0847, 0.8289, 0.8719, 0.8921, 0.9406, 0.8685, 0.9065, 0.8995, 0.8799],
    'Train_Loss': [0.6923, 0.6854, 0.6887, 0.6804, 0.6209, 0.3389, 0.2258, 0.1729, 0.1345, 0.1001, 0.0787, 0.0601],
    'Val_Loss': [0.6863, 0.6938, 0.6906, 0.6858, 0.4817, 0.2782, 0.2518, 0.2725, 0.2716, 0.2922, 0.3285, 0.3808]
})

# Embedding layer with 50 dimensions, LSTM layer with dropout of .3, LSTM layer
_50d_lstm_do3_lstm_fold4 = pd.DataFrame({
    'Epoch': range(1, 21),
    'Train_Accuracy': [0.5027, 0.5496, 0.5372, 0.6209, 0.6387, 0.6389, 0.6880, 0.7697, 0.5941, 0.6894, 0.7174, 0.7999, 0.8400, 0.8699, 0.8942, 0.9106, 0.9233, 0.9353, 0.9457, 0.9565],
    'Val_Accuracy': [0.5204, 0.5094, 0.5196, 0.6447, 0.7563, 0.6547, 0.7681, 0.7565, 0.5958, 0.5219, 0.7786, 0.7722, 0.8496, 0.8616, 0.8741, 0.8840, 0.8903, 0.8947, 0.8964, 0.8970],
    'Train_Precision': [0.5030, 0.5642, 0.5418, 0.6165, 0.6541, 0.6490, 0.6793, 0.8045, 0.6100, 0.7404, 0.7709, 0.8413, 0.8414, 0.8683, 0.8878, 0.9089, 0.9205, 0.9324, 0.9433, 0.9543],
    'Val_Precision': [0.6877, 0.5055, 0.5106, 0.5921, 0.7242, 0.5981, 0.7493, 0.7927, 0.8214, 0.5119, 0.8609, 0.8747, 0.8320, 0.8582, 0.9013, 0.8789, 0.8977, 0.9039, 0.9011, 0.8879],
    'Train_Recall': [0.4130, 0.4340, 0.4801, 0.6390, 0.5878, 0.6043, 0.7118, 0.7123, 0.5207, 0.5829, 0.6181, 0.7390, 0.8377, 0.8719, 0.9025, 0.9126, 0.9266, 0.9386, 0.9485, 0.9588],
    'Val_Recall': [0.0782, 0.9619, 0.9882, 0.9347, 0.8293, 0.9475, 0.8072, 0.6960, 0.2469, 0.9824, 0.6657, 0.6365, 0.8768, 0.8671, 0.8407, 0.8912, 0.8814, 0.8838, 0.8910, 0.9092],
    'Train_Loss': [0.6944, 0.6702, 0.6668, 0.6282, 0.6099, 0.6196, 0.5762, 0.5217, 0.6289, 0.5813, 0.5511, 0.4647, 0.4074, 0.3369, 0.2726, 0.2352, 0.2080, 0.1836, 0.1618, 0.1387],
    'Val_Loss': [0.6877, 0.6818, 0.6800, 0.6161, 0.5969, 0.6268, 0.5404, 0.5591, 0.6867, 0.6745, 0.5172, 0.5142, 0.3912, 0.3419, 0.3113, 0.3024, 0.2738, 0.2851, 0.2793, 0.2938]
})

# Embedding layer with 50 dimensions, LSTM layer with dropout of .3, LSTM layer
_50d_lstm_do3_lstm_fold5 = pd.DataFrame({
    'Epoch': range(1, 13),
    'Train_Accuracy': [0.5069, 0.5951, 0.5763, 0.6075, 0.8360, 0.9002, 0.9243, 0.9423, 0.9556, 0.9671, 0.9754, 0.9823],
    'Val_Accuracy': [0.5163, 0.7460, 0.5220, 0.7757, 0.8686, 0.8887, 0.8944, 0.9001, 0.8988, 0.8828, 0.8913, 0.8874],
    'Train_Precision': [0.5083, 0.5975, 0.6332, 0.6045, 0.8358, 0.9037, 0.9238, 0.9407, 0.9536, 0.9655, 0.9742, 0.9818],
    'Val_Precision': [0.5928, 0.7595, 0.5102, 0.7258, 0.8412, 0.8712, 0.9128, 0.8878, 0.9082, 0.9313, 0.9226, 0.9285],
    'Train_Recall': [0.4583, 0.5856, 0.3653, 0.6241, 0.8369, 0.8962, 0.9251, 0.9444, 0.9579, 0.9688, 0.9769, 0.9828],
    'Val_Recall': [0.0892, 0.7164, 0.9855, 0.8826, 0.9072, 0.9110, 0.8710, 0.9148, 0.8863, 0.8254, 0.8531, 0.8382],
    'Train_Loss': [0.6918, 0.6480, 0.6396, 0.6275, 0.3827, 0.2515, 0.1992, 0.1598, 0.1280, 0.1006, 0.0812, 0.0648],
    'Val_Loss': [0.6857, 0.5637, 1.2063, 0.4926, 0.3303, 0.2652, 0.2552, 0.2649, 0.2852, 0.3131, 0.3706, 0.3945]
})

dataframes = [_50d_lstm, _100d_lstm, _200d_lstm, _50d_lstm_lstm, _200d_lstm_lstm, _50d_lstm_do3_lstm, _50d_lstm_do3_lstm_do3, _50d_lstm_do3_lstm_do3_attempt2, _50d_lstm_do3_lstm_fold1, _50d_lstm_do3_lstm_fold2, _50d_lstm_do3_lstm_fold3, _50d_lstm_do3_lstm_fold4, _50d_lstm_do3_lstm_fold5]

models_dict = {
    '_50d_lstm': _50d_lstm,
    '_100d_lstm': _100d_lstm,
    '_200d_lstm': _200d_lstm,
    '_50d_lstm_lstm': _50d_lstm_lstm,
    '_200d_lstm_lstm': _200d_lstm_lstm,
    '_50d_lstm_do3_lstm': _50d_lstm_do3_lstm,
    '_50d_lstm_do3_lstm_do3': _50d_lstm_do3_lstm_do3,
    '_50d_lstm_do3_lstm_do3_attempt2': _50d_lstm_do3_lstm_do3_attempt2,
    '_50d_lstm_do3_lstm_fold1': _50d_lstm_do3_lstm_fold1,
    '_50d_lstm_do3_lstm_fold2': _50d_lstm_do3_lstm_fold2,
    '_50d_lstm_do3_lstm_fold3': _50d_lstm_do3_lstm_fold3,
    '_50d_lstm_do3_lstm_fold4': _50d_lstm_do3_lstm_fold4,
    '_50d_lstm_do3_lstm_fold5': _50d_lstm_do3_lstm_fold5
}

model_names, validation_accuracies = zip(*[(model_name, model['Val_Accuracy'].max()) for model_name, model in models_dict.items()])
epochs = [model['Epoch'][model['Val_Accuracy'].idxmax()] for model in models_dict.values()]

comparison_df = pd.DataFrame({
    'Epoch': epochs,
    'Model': model_names,
    'Validation_Accuracy': validation_accuracies
})
sorted_df = comparison_df.sort_values(by='Validation_Accuracy', ascending=False)
print(sorted_df[['Epoch', 'Model', 'Validation_Accuracy']].to_string(index=False))

